{"version":3,"sources":["data/recpieSlice.js","Component/Recipes.js","Component/Recipe.js","App.js","reportWebVitals.js","data/store.js","index.js"],"names":["recpieSlice","createSlice","name","initialState","loading","error","recepie","reducers","getRecipe","state","getRecipeSuccess","action","payload","getRecipeError","actions","Recipes","data","Container","Card","className","Img","variant","src","strMealThumb","Body","Title","strMeal","Recipe","useSelector","recipes","dispatch","useDispatch","useEffect","a","fetch","response","json","meals","map","index","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","ReactDOM","render","store","document","getElementById"],"mappings":"sPAQMA,EAAcC,YAAY,CAC5BC,KAAM,UACNC,aARiB,CACjBC,SAAS,EACTC,OAAO,EACPC,QAAQ,IAMRC,SAAU,CACNC,UAAU,SAACC,GACPA,EAAML,SAAU,GAEpBM,iBAAiB,SAACD,EAAOE,GACrBF,EAAML,SAAU,EAChBK,EAAMJ,OAAQ,EACdI,EAAMH,QAASK,EAAOC,SAE1BC,eAAe,SAACJ,GACZA,EAAML,SAAU,EAChBK,EAAMJ,OAAQ,M,EAQmCL,EAAYc,QAA3DN,E,EAAAA,UAAWE,E,EAAAA,iBAAkBG,E,EAAAA,eAC5Bb,IAAf,Q,sBCZee,EAfC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACjB,OACE,cAACC,EAAA,EAAD,UAEA,eAACC,EAAA,EAAD,CAAMC,UAAU,OAAhB,UACA,cAACD,EAAA,EAAKE,IAAN,CAAUC,QAAQ,MAAMC,IAAKN,EAAKO,eAChC,cAACL,EAAA,EAAKM,KAAN,UACE,cAACN,EAAA,EAAKO,MAAN,UAAaT,EAAKU,kBC6BXC,EAjCA,WACb,IAAMX,EAAOY,aAAY,SAACnB,GAAD,OAAWA,EAAMoB,WAEpCC,EAAWC,cAETzB,EAAYU,EAAZV,QAMR,OAJA0B,qBAAU,WACRF,EFsBA,uCAAO,WAAMA,GAAN,iBAAAG,EAAA,6DACHH,EAAStB,KADN,kBAIwB0B,MAAM,yDAJ9B,cAIOC,EAJP,gBAKoBA,EAASC,OAL7B,OAKOpB,EALP,OAMCc,EAASpB,EAAiBM,EAAKqB,QANhC,kDASCP,EAASjB,EAAe,EAAD,KATxB,0DAAP,yDErBC,CAACiB,IAGF,8BACGd,EAAKZ,QACJ,wCACEY,EAAKX,MACP,sCAEA,qBAAKc,UAAU,MAAf,SACCb,EAAQgC,KAAI,SAACtB,EAAMuB,GAAP,OACT,qBAAKpB,UAAU,WAAf,SACA,cAAC,EAAD,CAASH,KAAMA,cCjBZwB,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJCQ,G,MAAAA,YAAe,CAC5BC,QAAS,CACPtB,QAAS7B,MCIboD,IAASC,OACP,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bf,M","file":"static/js/main.d8ff279c.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    loading: false  ,\r\n    error: false,\r\n    recepie:[]\r\n}\r\n\r\nconst recpieSlice = createSlice({\r\n    name: 'recipes',\r\n    initialState,\r\n    reducers: {\r\n        getRecipe:(state)=>{\r\n            state.loading = true\r\n        },\r\n        getRecipeSuccess:(state, action)=>{\r\n            state.loading = false\r\n            state.error = false\r\n            state.recepie= action.payload\r\n        },\r\n        getRecipeError:(state)=>{\r\n            state.loading = false\r\n            state.error = true\r\n            \r\n        }\r\n\r\n    \r\n    }\r\n});\r\n\r\nexport const {getRecipe, getRecipeSuccess, getRecipeError} = recpieSlice.actions\r\nexport default recpieSlice.reducer\r\n\r\n\r\n//redux thunk async fetch data\r\n\r\nexport const fecthData = ()=>{\r\n    return async dispatch =>{\r\n        dispatch(getRecipe());\r\n\r\n        try{\r\n            const response = await fetch('https://www.themealdb.com/api/json/v1/1/search.php?s=');\r\n            const data = await response.json();\r\n            dispatch(getRecipeSuccess(data.meals));\r\n        }\r\n        catch (error){\r\n            dispatch(getRecipeError(error));\r\n        }\r\n    }\r\n    \r\n}","import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport {Col, Container} from \"react-bootstrap\";\r\n\r\nconst Recipes = ({ data }) => {\r\n  return (\r\n    <Container>\r\n   \r\n    <Card className=\"mt-5\">\r\n    <Card.Img variant=\"top\" src={data.strMealThumb} />\r\n      <Card.Body>\r\n        <Card.Title>{data.strMeal}</Card.Title>\r\n      </Card.Body>\r\n      </Card>\r\n    \r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Recipes;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fecthData, getRecipeSuccess } from \"../data/recpieSlice\";\r\nimport Recipes from \"./Recipes\";\r\n\r\nimport { Col, Row, Card } from \"react-bootstrap\";\r\n\r\nconst Recipe = () => {\r\n  const data = useSelector((state) => state.recipes);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { recepie } = data;\r\n\r\n  useEffect(() => {\r\n    dispatch(fecthData());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div>\r\n      {data.loading ? (\r\n        <p>loading</p>\r\n      ) : data.error ? (\r\n        <p>error</p>\r\n      ) : (\r\n        <div className=\"row\">\r\n        {recepie.map((data, index) => (\r\n            <div className=\"col-md-4\">\r\n            <Recipes data={data}/>\r\n          </div>\r\n        ))}\r\n      </div>\r\n       \r\n      )\r\n     \r\n        }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import './App.css';\nimport Recipe from './Component/Recipe';\n\nfunction App() {\n  return (\n    <div>\n      <Recipe/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport recpieSlice from './recpieSlice'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    recipes: recpieSlice,\r\n  },\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport store from './data/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}